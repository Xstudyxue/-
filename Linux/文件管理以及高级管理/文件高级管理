## 文件高级管理
#### 管道
【将前面命令的标准输出 传递给管道，作为后面命令的标准输入】
案例
1、打印出/etc/passwd文件的第5行
# head -5 /etc/passwd | tail -1

####  find-文件查找  
# find  查找路径  查找条件						//会查找隐藏目录下的文件，隐藏文件
选项【查找条件】
-name	//文件名称，支持通配符  【* 所有 ? 单个字符 //用了符号记得加  " " 】
-type	//文件类型 f 普通文件  b 设备 d 目录 l 链接文件
-size 	//文件大小  【+[大于] -[小于]】【KMG】
-group  //组名，属组
-user	//用户名，属主
-empty	//空文件或者目录
-mtime  //根据n天前修改内容的文件
-maxdepth  //查找层级目录 -maxdepth 1  只查找当前目录下的内容

多条件查找：
【默认是and ，需要满足两个条件】
# find 目录  条件1  条件2 

【or	或，只需要满足其中一个条件】
# find 目录  条件1  -o  条件2

【！ 非，不满足条件】
# find 目录 ！ 条件1

查找后的处理
-ok			//进行交互式，会询问
-exec		//直接处理
# find 查找路径  查找条件  -exec  处理动作  {}  \;         //{}代表前面查找的内容， \; 代表命令结束

案例
1、查找系统内以 .html 结尾的文件
# find / -name "*.html"
2、查找系统内文件大于5M的普通文件 
# find / -type f -size +5M
3、拷贝系统内所有以.conf 结尾的文件到/opt 目录
# find / -name "*.conf" -ok或exec cp /{} /opt/ \;                交互式或直接处理
# find / -name "*.conf" | xargs -I {} cp /{} /opt
4、查找系统内属主是tom 并且属组是IT的文件，并且将其的权限修改为666
# find / -user tom -group IT -ok或exec chmod {} 666 \; 2> /dev/null
# find / -user tom -group IT 2> /dev/null | xargs -I {} chmod 666 {}

#### grep -  过滤
功能：打印出匹配到"关键字"的行
写法：grep [选项] 关键字  文件
关键字：  
root 	//含有root的行
^root	//以root开头的行
root$	//以root结尾的行
^$		//空行
【加上"" 引起来】
选项：
-i		//忽略大小写
-v		//取反
-n		//带行号打印
-q		//不输出 类似 &> /dev/null
-c		//统计匹配到的行的数量
-w		//只过滤匹配的关键字 “整体”
-r		//递归目录查找关键字,后面接着目录
-E		//支持扩展正则->    | 或

案例：
1、在/etc/passwd 文件中过滤以root开头的行
# grep "^root" /etc/passwd 
2、统计系统内不能正常登入的用户有几个？
# grep -vc "/bin/bash$" /etc/passwd
3、打印出/etc/rc.local的文件的空行是第几行？
# grep -n "^$" /etc/rc.local 
4、打印出GID为 10 的组 ？
# grep -w 10 /etc/group 
5、统计系统有多少用户 (多写几种方法)
# grep -c ":" /etc/passwd 
# wc -l /etc/passwd

#### wc  -  统计
功能：统计行数，字符数，单词数
语法： wc [选项] 文件
选项：
	-l		//统计行数
	-c		//统计字节数
案例：
1、统计一下系统里面空的普通文件有多少个？
# find / -type f -empty | wc -l
2、统计一下系统里面的组有多少个？
# wc -l /etc/group
3、统计一下 /home [包括子目录] 有多少个目录  
# find /home -type d| wc -l
# ls -alR /home | grep -v "\.$" | grep "^d" | wc -l
# tree -aR /home
4、统计一下系统里面大于5M的普通文件有多少个？
# find / -type f -size +5M 2> /dev/null | wc -l	

#### sort  -  行排序
功能: 将文件中的行进行排序后输出
语法: sort [选项] 文件
选项:
	-n		//按照数值进行排序
	-r		//逆序排序，从大到小，默认是从小到大
	-t		//指定字段分隔符 //如果是你空格为分隔符，空格的数量为影响排序
	-k		//指定按照第几列排序 
	-o		//不会输出排序，会标准输入到其他文件， -o 原文件,相当于给原文件内容进行排序
	
练习
1、用标准输入的方式(键盘输入)，创建文件a.txt,文件的内容如下
1@a@333
3@d@222
2@b@444
4@c@111
2、将a.txt进行排序输出，以小写字母排序
# sort -t"@" -k2 a.txt 
3、以第1列的数字进行倒序排序输出
# sort -t"@" -k1 -r a.txt
# sort -r a.txt	##默认是以第一列字符进行排序
4、以@为分隔符的第3列的数值进行排序，并且将排序好的内容写入到b.txt
# sort -t"@" -k3 -n -o a.txt b.txt 	

#### uniq - 去重 
功能： 过滤掉连续重复的行   //类似于消消乐，相同的行就过滤掉
语法： uniq [选项] 文件
选项
	-c 		//统计相同的行的行数，行数写在最前面
	-i		//不区分大小写
	-u		//只打印不重复的行

1、通过标准输入写入文件c.txt ,文件内容如下
aaa
aaa
bbb
ccc
ccc
bbb
aAa
2、分类统计，不同行的行数
# uniq -c c.txt
3、不打印连续重复的行
# uniq -u c.txt	
4、分类统计，不同行的行数，不区分大小写
# uniq -ic c.txt	

#### cut	-   处理列
功能：打印列
语法：cut 选项 文件
选项：
	-d		//指定分隔符，如果指定空格为分隔符需要去数空格
	-f		//指定需要打印的字段(列)  -f1,3   同时取出第一列和第三列
扩展：
awk
功能：主要是打印列
语法: awk -F"" '{print $1}' 文件    	// -F 指定分隔符 ， print $1  打印第一列  $0 全部  $NF  最后一列
选项：
	NR	//指定第几行 NR==2
案例
# df -Th | awk -F" " 'NR==2{print $6}'
//取出df -Th命令的输出，第二行以空格为分隔符取出第6列

案例：
1、将/etc/passwd 的UID进行输出，然后再进行从大到小进行排序
# cut -d":" -f3 /etc/passwd | sort -nr
2、将/etc/passwd 的前三个用户名打印出来
# head -3 /etc/passwd | cut -d : -f1  
3、分类统计当前系统登入shell的数量，比如  /bin/bash出现的数量  /sbin/nologin出现的数量  等
# cut -d":" -f7 /etc/passwd | sort |uniq -c
4、在上题的基础上，把统计出来shell的数量进行从大到小排序
# sort -r
5、在上题的基础上，把排序好的shell的数量，只打印前3名
# head -3

#### tr - 处理字符
功能： 从标准输入中去替换、缩减或删除字符，并将结果写到标准输出
用法
# tr 选项 < 文件
# 命令输出 | tr 选项
语法：tr [选项] set1 [set2]
选项：
	-d	//删除set1中所有的字符
	-s  //如果只有set1,将set1中的连续字符缩减为1个;如果有set1和set2则将set1中的字符缩减后替换成set2
	-t	//将set1中的字符对应替换成set2中的字符(set1中的字符不要重复)

【扩展】
sed		替换删除
格式：
# sed 's/a/A/g' a.txt 	//把a.txt文件里面的全部a替换成A
-i	//直接作用于源文件 

随堂练习
1、输出1~10 效果跟执行 seq 10 命令一样
# echo {1..10} |xargs -n1	
# echo {1..10} | tr -t " " "\n"
2、准备一个通讯录文件，电话号码，内容如下
# cat phone.txt
152 7924 8233
125 4589 4532
189 1234 8889

	2.1 修改文件，将文件的空格全部去掉
    # tr -d " "< phone.txt 
	# sed -i 's/ //g' phone.txt
	2.2 修改文件，修改文件的内容类似为 123-4567-8901
	# tr -s " " "-" < phone.txt 
	# sed 's/ /-/g' phone.txt 		
3、将系统所有的用户和对应的uid打印出来，并且显示为  用户名-uid
# cut -d : -f1,3 /etc/passwd | tr -s ":" "-"
4、要求将 df -Th 命令的磁盘已用百分比，以大到小的顺序排序显示
# df -Th | tr -s " " | sort -t" " -k 6 -rn

#### [扩展]sed - 处理字符

文本的操作
sed是一个“非交互式的”面向字符流的编辑器。
awk是一种负责模式匹配的程序设计语言，,的典型示例是将数据转换成格式化的报表。

sed  stream editor
    是一种文本编辑器,默认情况下是不会修改原文件的。
    也是一种非交互式的编辑器
工作原理
    一行一行处理的
    当从文件中读取一行后,首先放到模式空间中对该行进行相应的处理,处理完将结果输出到屏幕上。然后继续读取下一行内容,直到所有行都读取完毕,sed结束。
语法：
    sed    [选项]   '模式 动作'  文件...
  选项：
        -n：静默输出,关闭模式空间的输出,不会输出未匹配到的行 一般与p命令结合使用
        -e：允许进行多项编辑,也就是说对同一行做多次处理、. 可以做多点编辑  
                -e '动作1'  -e '动作2'   ==  '动作1;动作2'
        -f： 后接sed脚本,指定执行的sed脚本(将模式动作写到文件中)
        -r：允许使用扩展正则
        -i：直接作用于原文件    没有输出  在使用-i之前一定先不加-i看看效果
            -i.bak:修改原文件之前进行备份
  模式:
    1. 空模式,表示所有的行都执行动作
    2. 以行号作为模式
        1). 单独的行号
             如：1   就是处理第1行
                 $   处理最后一行
        2). 起始行,结束行
              如：1,5     处理第1到5行
        3). 起始行~步长
              每隔多少行操作一次
              如:2~2 从第2行开始,每隔1行
        4). 起始位置,+N
             表示从起始位置开始,后面的N行都进行处理
             如：3,+5   处理3-8行
    3. 以正则(过滤)作为模式             
        1). /正则表达式/
            如：/^root/
        2). /正则表达式1/,/正则表达式2/
           表示从第一次匹配到正则表达式1开始到第一次匹配到正则表达式2之间的所有行
              如：/^bin/,/sh$/
  动作-----处理命令:   ! 非 : 放在命令前面表示取反
    1. d    删除       delete               
    2. p    打印       print
    3. r     读取       read 	//  sed '1 r a.txt' pass 	将a.txt的内容写入pass文件的第一行下面             
    4. w    写          write
    5. a     追加   在匹配的行下面插入内容            append   
    6. i      插入   在匹配行的上一行插入内容         insert
    7. c     修改    整行替换                                  change
    8. y     转换的命令,一一对应转换
    9. n     处理下一行       1 n;s/://g   除了第一行，下面的所有行:多替换为空                      next
    10. q    退出,不会再向模式空间读入新的行       quit
    11. s    查找替换
        '模式 s/旧的内容(正则表达式)/替换内容(新的内容)/[修饰符]'
            修饰符：
                g：全局替换
                n：n为数字,1-512    替换第n个匹配到的内容
                p：打印      -n
                w：把处理过的行写入到另一个文件
小试牛刀
1. 从以root开头的行,到以login结尾的行,将sbin替换为bin (/etc/passwd文件或其一部分)
# sed -r -n '/^root/,/login$/s/sbin/bin/p' /etc/passwd	
2. 将格式为2023/08/17的日期,替换为2023; 08; 17这样的格式(注意分号后面有空格)  
# date +"%Y/%m/%d" | sed "s/\//; /g"	
3. 删除pass文件中所有的数字
# sed -n "s/[0-9]//gp" pass
4. 在 5 ~ 8行的前面加上#
# sed "5,8 s/^/#/" pass
5. 将pass文件每行打印3次
# sed "p;p" pass
6. 只打印pass文件的第1行和第3行
# sed -n "1p;3p" pass
7. 删除pass文件的第一行和最后一行  
# sed "1d;$d" pass

#### tee 
功能:将从标准输入中读取到的内容同时写入到标准输出和文件中    >  >>    多一个功能： 追加输入的同时会输出在终端
(管道的后面)
语法：tee [选项]  文件
选项：
	-a   //追加到文件中， 不加 -a 默认就是先覆盖在追加

#### du - 查看文件的大小
查看文件的大小，类似于 ls -lh
用法
du -sh 文件		//单独查看文件的大小
du -sSh 目录		//单独查看目录的大小
为什么 du 和 ls -lh  同一个文件，大小差异这么大？
在日常工作中，以哪个大小为准？
单独看某个文件的实际大小  ls -lh 文件
单独看某个目录的实际大小  du -sSh 目录

#### xargs - 传参
功能:将从标准输入中接收到的内容(以空格分隔)传递给后面的命令作为其参数
案例：
参数以空格隔开
# echo "tom jerry"
tom jerry
# echo "tom jerry" | xargs -n1 id
uid=8889(tom) gid=8892(tom) 组=8892(tom),8890(WEB)
uid=1001(jerry) gid=8890(WEB) 组=8890(WEB),10(wheel)
参数以换行隔开
# cat a.txt
123.txt
123.html
123.py
# cat a.txt | xargs -I {} touch {}
# ls
123.html  123.py  123.txt

#### 文件的打包压缩
zip
tar
//.rar -- windows专属

压缩的好处
1、节省磁盘空间
2、节省网络带宽，加快传输速度

zip
压缩：
【压缩后原文件不会消失，压缩包的后缀.zip】
# yum install zip -y 	//安装压缩命令
语法：  zip [选项] 压缩包名 需要压缩文件列表
选项
	-r    	//压缩目录,不加 -r  [也可以压缩，只是打包目录而已，不会打包目录里的文件]
	
解压：
# yum install unzip -y 		//安装解压命令
语法：unzip 压缩包名			//解压到当前目录
选项
	-d		//解压到哪，一般后面接目录
	-l		//查询压缩包内有哪些内容
案例：
1、将 /etc/passwd /etc/group /etc/shadow 压缩为 a.zip 放到 /tmp 下
zip -r /tmp a.zip /etc/{passwd,group,shadow}
2、压缩 /usr/local/目录下的文件，不要打包上 /usr/local 目录结构
zip  local.zip  /usr/local/*
3、将 /tmp/a.zip 压缩包的内容解压到 /opt 下
unzip /tmp/a.zip -d /opt

tar
功能： 即可打包，也可压缩
	打包： 只是归档，文件的大小不会发生改变
	压缩：	压缩后文件的大小会发生改变(可能会导致文件损坏)
打包/压缩语法：
	# tar 选项 包名	文件列表
解包/解压语法：
	# tar 选项 包名	
选项：
	-c	//创建归档
	-x	//解压
	-f	//必须选项，后接压缩包名字  归档  -cf  解压 -xf
	-xf	//后接包名，必须选项
	-tf	//查询包中有哪些文件
	-rf	//往包中追加文件，不适用压缩包
	-czf	//通过gzip压缩	xxx.tar.gz
	-cjf	//通过bzip2压缩	xxx.tar.bz2   //yum install bzip2 -y 需要安装该程序
	-cJf	//通过xz压缩	xxx.tar.xz
	-caf  //通过压缩包后缀，自动选择程序进行压缩，后缀一定要写对
	-C  //解压时，指定解压目录
	
案例：
1、将/tmp 目录压缩为  tmp.tar.gz
# tar -czf tmp.tar.gz /tmp	
2、将tmp.tar.gz 解压到 /usr/local/
# tar -caf tmp.tar.gz -C /usr/local/	
3、将系统里面的所有的.conf 文件打包在当前目录，命名为conf.tar.gz
# find / -name "*.conf" | xargs -I {} tar -czf conf.tar.gz /{} 
4、将压缩包conf.tar.gz  解压到/tmp/conf 目录下，先创建该目录
# mkdir /tmp/conf
# tar -caf conf.tar.gz -C /tmp/conf
